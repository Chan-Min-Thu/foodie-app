// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           Int            @id @default(autoincrement())
  name         String?
  address      String?
  loactions    Location[]
  menuCategory MenuCategory[]
  users        User[]
  isArchived   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Location {
  id                           Int                            @id @default(autoincrement())
  name                         String
  address                      String
  companyId                    Int
  company                      Company                        @relation(fields: [companyId], references: [id])
  disabledMenuCategoryLocation DisabledMenuCategoryLocation[]
  disabledMenuLoction          DisabledMenuLocation[]
  table                        Table[]
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
}

model MenuCategory {
  id                           Int                            @id @default(autoincrement())
  name                         String
  companyId                    Int
  company                      Company                        @relation(fields: [companyId], references: [id])
  disabledMenuCategoryLocation DisabledMenuCategoryLocation[]
  menuCategoryMenu             MenuCategoryMenu[]
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
}

model DisabledMenuCategoryLocation {
  id             Int          @id @default(autoincrement())
  menuCategoryId Int
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])
  locationId     Int
  location       Location     @relation(fields: [locationId], references: [id])
  isArchived     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Menu {
  id                  Int                   @id @default(autoincrement())
  name                String
  price               Int
  imgUrl              String?
  menuCategoryMenu    MenuCategoryMenu[]
  disabledMenuLoction DisabledMenuLocation[]
  addOnCategoryMenu   AddOnCategoryMenu[]
  Order              Order[]
  isArchived          Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model MenuCategoryMenu {
  id             Int          @id @default(autoincrement())
  menuId         Int
  menu           Menu         @relation(fields: [menuId], references: [id])
  menuCategoryId Int
 
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])
  isArchived     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model DisabledMenuLocation {
  id         Int      @id @default(autoincrement())
  menuId     Int
  menu       Menu     @relation(fields: [menuId], references: [id])
  locationId Int
  location   Location @relation(fields: [locationId], references: [id])
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AddOnCategory {
  id                Int                 @id @default(autoincrement())
  name              String
  isRequired        Boolean             @default(false)
  addOnCategoryMenu AddOnCategoryMenu[]
  addOn             AddOn[]
  isArchived        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model AddOnCategoryMenu {
  id              Int           @id @default(autoincrement())
  menuId          Int
  menu            Menu          @relation(fields: [menuId], references: [id])
  addOnCategoryId Int
  addOnCategory   AddOnCategory @relation(fields: [addOnCategoryId], references: [id])
  isArchived      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model AddOn {
  id              Int           @id @default(autoincrement())
  name            String
  price           Int           @default(0)
  addOnCategoryId Int
  addOnCategory   AddOnCategory @relation(fields: [addOnCategoryId], references: [id])
  Order           Order[]
  isArchived      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  status     ORDERSTATUS
  totalPrice Int
  menuId     Int
  menu       Menu     @relation(fields: [menuId], references: [id])
  addOnId    Int?
  addOn      AddOn?    @relation(fields: [addOnId], references: [id])
  quantity   Int
  orderSeq   String
  itemId     String?
  tableId    Int
  table      Table       @relation(fields: [tableId], references: [id])
  isArchived Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Table {
  id         Int      @id @default(autoincrement())
  name       String
  assetUrl   String
  locationId Int
  location   Location @relation(fields: [locationId], references: [id])
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order[]
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String
  companyId  Int
  company    Company  @relation(fields: [companyId], references: [id])
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ORDERSTATUS {
  PENDING
  COOKING
  COMPLETED
}
